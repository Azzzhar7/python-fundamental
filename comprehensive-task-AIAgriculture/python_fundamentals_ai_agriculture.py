# -*- coding: utf-8 -*-
"""python_fundamentals_AI_agriculture.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1H9uyz5I5R4-3GAgJ3mB2GE9iwpi-sVFx

# Scenario-Based Course Tasks: Python Fundamentals for AI in Agriculture

## Scenario Background
You are a beginner data scientist working with an agricultural research team. The team is collecting simple crop yield data from small farms to understand productivity trends and prepare for future AI-based automation. As part of the training, you will build small Python programs to simulate, process, analyze, and visualize agricultural data.  

Each task builds on the previous one, gradually taking you from basic Python logic to applied data analysis and visualization.  

---

## Task 1: Fundamentals of Python (Logic & Data Representation)
**Scenario:** The research team needs a simple program to record farmer details.  

You are tasked to implement:  
- A script that prints “Welcome to Crop Yield Analyzer”.  
- Variables to store farmer’s name, farm size (in acres), and main crop.  
- Demonstrate data types: integers, floats, strings, and booleans.  
- Implement if-else: e.g., check if farm size > 10 acres → “Large farm”, else → “Small farm”.  
- Implement loops to generate a sample list of crops: [“Wheat”, “Rice”, “Corn”].  

**Learning outcome:** Data types, variables, conditionals, loops.  

---

## Task 2: Static Data Processing (Pre-Generated Dataset)
**Scenario:** Researchers have collected static sample data of crop yields.  

Your tasks:  
- Store this dataset as a list of dictionaries or a list of tuples.  
- Write Python code to:  
  - Print all farmers growing Wheat.  
  - Calculate total yield across all farmers.  
  - Find the farmer with maximum yield.  

**Learning outcome:** Lists, dictionaries, loops, basic aggregation.  

**Sample dataset structure:**  
```python
data = [
    {"Farmer": "Farmer 1", "Crop": "Wheat", "Acres": 5, "Yield": 12, "Region": "North"},
    {"Farmer": "Farmer 2", "Crop": "Rice",  "Acres": 8, "Yield": 18, "Region": "South"},
    {"Farmer": "Farmer 3", "Crop": "Corn",  "Acres": 4, "Yield": 9,  "Region": "East"},
    {"Farmer": "Farmer 4", "Crop": "Wheat", "Acres": 6, "Yield": 14, "Region": "West"},
]
```

---

## Task 3: Data Analysis (Beginner Level)
**Scenario:** Now the team wants basic analysis of the yield data.  

You must:  
- Implement functions to:  
  - Calculate average yield per crop type.  
  - Count how many farmers are in each region.  
- Add exception handling: If data is missing (e.g., no yield for a farmer), handle it gracefully.  

**Learning outcome:** Functions, error handling, reusable code.  

---

## Task 4: Statistical Analysis
**Scenario:** Researchers want to know the statistical distribution of yields.  

Use Python to calculate:  
- Mean, Median, Mode of crop yields.  
- Standard deviation to check variability.  
- Correlation between acres vs yield.  

**Sample Output Example:**  
```
Mean Yield = 13.25 tons
Median Yield = 13 tons
Standard Deviation = 3.5
Correlation (Acres, Yield) = 0.89
```  

**Learning outcome:** Basic statistics in Python (statistics module, NumPy optional).  

---

## Task 5: Data Visualization (Graphs & Tables)
**Scenario:** Present results visually for non-technical researchers.  

Use Matplotlib / Pandas to:  
- Create a bar chart: Average yield per crop.  
- Create a pie chart: Percentage of farmers by region.  
- Create a scatter plot: Acres vs Yield.  

Also:  
- Show results in a simple table format using Pandas DataFrame.  

**Learning outcome:** Beginner data visualization, tables, clear presentation.  

---

## Extension (Optional Advanced Mini-Project)
If students finish early:  
- Predict expected yield for a farmer using a simple formula:  
  `Predicted Yield = Acres × Average Yield per Acre (based on dataset)`  
- Display results for each farmer.  

---

## Setup Your Environment
- Install Python 3.9+  
- Recommended tools:  
  - Anaconda (comes with Jupyter Notebook & libraries pre-installed), or  
  - Install manually: `pip install numpy pandas matplotlib`  
- Use Jupyter Notebook, VS Code, or PyCharm to run your code.  

---

## How to Use
- Copy this course task guide into a new file named:  
  `python_fundamentals_AI_agriculture.ipynb`  
- Upload to Google Colab or Jupyter Notebook.  
- Run step by step (`Shift+Enter`).
"""

# ===============================================================
# Scenario-Based Course Tasks: Python Fundamentals for AI in Agriculture
# ===============================================================
# SCENARIO BACKGROUND
# You are a beginner data scientist working with an agricultural research team.
# The team is collecting simple crop yield data from small farms to understand
# productivity trends and prepare for future AI-based automation. As part of
# the training, you will build small Python programs to simulate, process,
# analyze, and visualize agricultural data.
#
# Each task builds on the previous one, gradually taking you from basic Python
# logic to applied data analysis and visualization.

# ---------------------------------------------------------------
# STEP 1 — FUNDAMENTALS OF PYTHON (LOGIC & DATA REPRESENTATION)
# ---------------------------------------------------------------
# Scenario:
# The research team needs a simple program to record farmer details.
#
# Implement:
# 1) A script that prints "Welcome to Crop Yield Analyzer".
# 2) Variables to store farmer’s name, farm size (in acres), and main crop.
# 3) Demonstrate data types: integers, floats, strings, booleans.
# 4) Implement if-else:
#    - If farm size > 10 acres → print "Large farm", else → "Small farm".
# 5) Implement loops to generate a sample list of crops: ["Wheat", "Rice", "Corn"].
#
# Learning outcome:
# - Data types, variables, conditionals, and loops.

# ---------------------------------------------------------------
# STEP 2 — STATIC DATA PROCESSING (PRE-GENERATED DATASET)
# ---------------------------------------------------------------
# Scenario:
# Researchers have collected static sample data of crop yields.
#
# Your tasks:
# 1) Store this dataset as a list of dictionaries or a list of tuples.
# 2) Write Python code to:
#    a) Print all farmers growing "Wheat".
#    b) Calculate total yield across all farmers.
#    c) Find the farmer with maximum yield.
#
# Learning outcome:
# - Lists, dictionaries, loops, and basic aggregation.
#
# Sample dataset structure (example, not executable here):
# data = [
#     {"Farmer": "Farmer 1", "Crop": "Wheat", "Acres": 5, "Yield": 12, "Region": "North"},
#     {"Farmer": "Farmer 2", "Crop": "Rice",  "Acres": 8, "Yield": 18, "Region": "South"},
#     {"Farmer": "Farmer 3", "Crop": "Corn",  "Acres": 4, "Yield": 9,  "Region": "East"},
#     {"Farmer": "Farmer 4", "Crop": "Wheat", "Acres": 6, "Yield": 14, "Region": "West"},
# ]

# ---------------------------------------------------------------
# STEP 3 — DATA ANALYSIS (BEGINNER LEVEL)
# ---------------------------------------------------------------
# Scenario:
# The team now wants basic analysis of the yield data.
#
# Implement functions to:
# 1) Calculate average yield per crop type.
# 2) Count how many farmers are in each region.
#
# Add exception handling:
# - If data is missing (e.g., missing "Yield" field), handle it gracefully
#   by skipping the record or substituting a default value.
#
# Learning outcome:
# - Functions, error handling, and writing reusable code.

# ---------------------------------------------------------------
# STEP 4 — STATISTICAL ANALYSIS
# ---------------------------------------------------------------
# Scenario:
# Researchers want to know the statistical distribution of yields.
#
# Use Python to calculate:
# 1) Mean, Median, Mode of crop yields.
# 2) Standard deviation to check variability.
# 3) Correlation between acres and yield.
#
# Sample output example (illustrative only):
# - Mean Yield = 13.25 tons
# - Median Yield = 13 tons
# - Standard Deviation = 3.5
# - Correlation (Acres, Yield) = 0.89
#
# Learning outcome:
# - Basic statistics in Python (statistics module, NumPy optional).

# ---------------------------------------------------------------
# STEP 5 — DATA VISUALIZATION (GRAPHS & TABLES)
# ---------------------------------------------------------------
# Scenario:
# Present results visually for non-technical researchers.
#
# Use Matplotlib / Pandas to:
# 1) Create a bar chart: Average yield per crop.
# 2) Create a pie chart: Percentage of farmers by region.
# 3) Create a scatter plot: Acres vs. Yield.
#
# Also:
# - Show results in a simple table format using a Pandas DataFrame.
#
# Learning outcome:
# - Beginner data visualization, tabular display, and clear presentation.

# ---------------------------------------------------------------
# EXTENSION — OPTIONAL ADVANCED MINI-PROJECT
# ---------------------------------------------------------------
# If students finish early:
# 1) Predict expected yield for a farmer using a simple formula:
#    Predicted Yield = Acres × Average Yield per Acre (based on dataset).
# 2) Display predicted results for each farmer.

# ---------------------------------------------------------------
# ENVIRONMENT SETUP (PREREQUISITES)
# ---------------------------------------------------------------
# 1) Install Python 3.9+.
# 2) Recommended tools:
#    - Anaconda (includes Jupyter Notebook and libraries), or
#    - Install libraries manually:
#        pip install numpy pandas matplotlib
# 3) Use Jupyter Notebook, VS Code, or PyCharm to run your code.

# ---------------------------------------------------------------
# HOW TO USE (WORKFLOW)
# ---------------------------------------------------------------
# 1) Copy the code and tasks into a new notebook file named:
#    python_fundamentals_AI_agriculture.ipynb
# 2) Upload the notebook to Google Colab or open locally in Jupyter.
# 3) Run step by step (Shift+Enter), completing each step’s requirements
#    before moving to the next.

# ============================================================
# Step 0: Setup Environment
# ============================================================

# Install required libraries (uncomment if running locally, not needed in Colab)
# !pip install numpy pandas matplotlib

import statistics as stats
import pandas as pd
import matplotlib.pyplot as plt

# ============================================================
# Step 1: Fundamentals of Python (Variables, Logic, Loops)
# ============================================================

# Print a welcome message
print("Welcome to Crop Yield Analyzer")

# Define variables
farmer_name = "Farmer 1"
farm_size = 12
crop = "Wheat"

# Conditional check for farm size
if farm_size > 10:
    print("Large farm")
else:
    print("Small farm")

# Loop through crops list
crops = ["Wheat", "Rice", "Corn"]
for c in crops:
    print("Crop:", c)

# ============================================================
# Step 2: Static Data Processing (Pre-generated dataset)
# ============================================================

# Define dataset as a list of dictionaries
data = [
    {"Farmer": "Farmer 1", "Crop": "Wheat", "Acres": 5, "Yield": 12, "Region": "North"},
    {"Farmer": "Farmer 2", "Crop": "Rice", "Acres": 8, "Yield": 18, "Region": "South"},
    {"Farmer": "Farmer 3", "Crop": "Corn", "Acres": 4, "Yield": 9, "Region": "East"},
    {"Farmer": "Farmer 4", "Crop": "Wheat", "Acres": 6, "Yield": 14, "Region": "West"},
]

# Print all wheat farmers
print("\nFarmers growing Wheat:")
for record in data:
    if record["Crop"] == "Wheat":
        print(record["Farmer"])

# Calculate total yield
total_yield = sum([record["Yield"] for record in data])
print("\nTotal Yield:", total_yield)

# Find farmer with maximum yield
max_farmer = max(data, key=lambda x: x["Yield"])
print("Top Farmer:", max_farmer["Farmer"], "with", max_farmer["Yield"], "tons")

# ============================================================
# Step 3: Data Analysis with Functions
# ============================================================

# Function to calculate average yield for a crop
def average_yield(crop):
    values = [r["Yield"] for r in data if r["Crop"] == crop]
    return sum(values) / len(values) if values else 0

# Function to count farmers by region
def count_by_region():
    regions = {}
    for r in data:
        regions[r["Region"]] = regions.get(r["Region"], 0) + 1
    return regions

# Call functions
print("\nAverage Wheat Yield:", average_yield("Wheat"))
print("Farmers by Region:", count_by_region())

# ============================================================
# Step 4: Statistical Analysis
# ============================================================

# Extract values
yields = [r["Yield"] for r in data]
acres = [r["Acres"] for r in data]

# Compute mean, median, standard deviation
print("\nStatistical Analysis:")
print("Mean Yield =", stats.mean(yields))
print("Median Yield =", stats.median(yields))
print("Standard Deviation =", stats.stdev(yields))

# Compute correlation (Acres vs Yield) manually
mean_acres = stats.mean(acres)
mean_yields = stats.mean(yields)

covariance = sum((a - mean_acres) * (y - mean_yields) for a, y in zip(acres, yields)) / (len(acres) - 1)
variance_acres = sum((a - mean_acres) ** 2 for a in acres) / (len(acres) - 1)
variance_yields = sum((y - mean_yields) ** 2 for y in yields) / (len(yields) - 1)
correlation = covariance / (variance_acres ** 0.5 * variance_yields ** 0.5)

print("Correlation (Acres vs Yield) =", round(correlation, 2))

# ============================================================
# Step 5: Data Visualization
# ============================================================

# Convert dataset to pandas DataFrame
df = pd.DataFrame(data)

# Bar chart: Average yield per crop
df.groupby("Crop")["Yield"].mean().plot(kind="bar", title="Average Yield per Crop")
plt.ylabel("Yield (tons)")
plt.show()

# Pie chart: Farmers by region
df["Region"].value_counts().plot(kind="pie", autopct="%1.1f%%", title="Farmers by Region")
plt.ylabel("")  # Hide y-label
plt.show()

# Scatter plot: Acres vs Yield
plt.scatter(df["Acres"], df["Yield"])
plt.xlabel("Acres")
plt.ylabel("Yield (tons)")
plt.title("Acres vs Yield")
plt.show()

# Display DataFrame as table
print("\nData Table:")
print(df)

# ============================================================
# Step 6: Optional Mini Project - Yield Prediction
# ============================================================

# Calculate average yield per acre
avg_yield_per_acre = sum(df["Yield"]) / sum(df["Acres"])

# Add predicted yield column
df["Predicted_Yield"] = df["Acres"] * avg_yield_per_acre

print("\nTable with Predicted Yields:")
print(df[["Farmer", "Crop", "Acres", "Predicted_Yield"]])